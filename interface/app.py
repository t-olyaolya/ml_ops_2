import streamlit as st
import pandas as pd
from kafka import KafkaProducer
import json
import time
import os
import uuid
import psycopg2
import matplotlib.pyplot as plt

POSTGRES_CONFIG = {
    "host": os.getenv("POSTGRES_HOST", "postgres"),
    "port": os.getenv("POSTGRES_PORT", "5432"),
    "dbname": os.getenv("POSTGRES_DB", "scoring_db"),
    "user": os.getenv("POSTGRES_USER", "scorer"),
    "password": os.getenv("POSTGRES_PASSWORD", "scorer_pass"),
}


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_CONFIG = {
    "bootstrap_servers": os.getenv("KAFKA_BROKERS", "kafka:9092"),
    "topic": os.getenv("KAFKA_TOPIC", "transactions")
}

def get_results():
    conn = psycopg2.connect(**POSTGRES_CONFIG)
    cur = conn.cursor()

    # 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö fraud-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cur.execute("""
        SELECT transaction_id, score, fraud_flag
        FROM scoring_results
        WHERE fraud_flag = true
        ORDER BY transaction_id DESC
        LIMIT 10;
    """)
    fraud_rows = cur.fetchall()

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    cur.execute("""
        SELECT score
        FROM scoring_results
        ORDER BY transaction_id DESC
        LIMIT 100;
    """)
    score_rows = cur.fetchall()

    cur.close()
    conn.close()

    fraud_df = pd.DataFrame(fraud_rows, columns=["transaction_id", "score", "fraud_flag"])
    scores = [s[0] for s in score_rows]

    return fraud_df, scores


def load_file(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ –≤ DataFrame"""
    try:
        return pd.read_csv(uploaded_file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def send_to_kafka(df, topic, bootstrap_servers):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda v: json.dumps(v).encode("utf-8"),
            security_protocol="PLAINTEXT"
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        df['transaction_id'] = [str(uuid.uuid4()) for _ in range(len(df))]
        
        progress_bar = st.progress(0)
        total_rows = len(df)
        
        for idx, row in df.iterrows():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å ID
            producer.send(
                topic, 
                value={
                    "transaction_id": row['transaction_id'],
                    "data": row.drop('transaction_id').to_dict()
                }
            )
            progress_bar.progress((idx + 1) / total_rows)
            time.sleep(0.01)
            
        producer.flush()
     
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = {}

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka")

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏",
    type=["csv"]
)

if uploaded_file and uploaded_file.name not in st.session_state.uploaded_files:
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st.session_state.uploaded_files[uploaded_file.name] = {
        "status": "–ó–∞–≥—Ä—É–∂–µ–Ω",
        "df": load_file(uploaded_file)
    }
    st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

# –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if st.session_state.uploaded_files:
    st.subheader("üóÇ –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    for file_name, file_data in st.session_state.uploaded_files.items():
        cols = st.columns([4, 2, 2])
        
        with cols[0]:
            st.markdown(f"**–§–∞–π–ª:** `{file_name}`")
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** `{file_data['status']}`")
        
        with cols[2]:
            if st.button(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {file_name}", key=f"send_{file_name}"):
                if file_data["df"] is not None:
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞..."):
                        success = send_to_kafka(
                            file_data["df"],
                            KAFKA_CONFIG["topic"],
                            KAFKA_CONFIG["bootstrap_servers"]
                        )
                        if success:
                            st.session_state.uploaded_files[file_name]["status"] = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                            st.rerun()
                else:
                    st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

st.markdown("---")
st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–æ—Ä–∏–Ω–≥–∞")

if st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."):
        fraud_df, score_list = get_results()

        if fraud_df.empty:
            st.info("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–ª–∞–≥–æ–º fraud.")
        else:
            st.markdown("### üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            st.dataframe(fraud_df)

        if score_list:
            st.markdown("### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100):")
            fig, ax = plt.subplots()
            ax.hist(score_list, bins=20)
            ax.set_xlabel("Score")
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            ax.set_title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ score")
            st.pyplot(fig)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.")
